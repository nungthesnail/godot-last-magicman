[gd_scene load_steps=26 format=2]

[ext_resource path="res://Models/player/player.glb" type="PackedScene" id=1]
[ext_resource path="res://Objects/player/components/playerHand.tscn" type="PackedScene" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody


export (String) var dir
export (bool) var canMove

var speed = 10
var jumpForce = 25
var vel = Vector3()

onready var anim = $anim
onready var anim1 = $anim1

var hp = 200
var score = 0
var force = 10
var fire = false
var hasSword = false
var sword = null
var IsSpawned : bool = false

var params = {\"ILS\":false, \"IsDead\":false, \"AE\":null, \"Zpos\":null,\"LItem\":null}

func injure(Force):
	hp -= Force
	if Force >= 3 and hp > Force:
		anim1.play(\"GetDamage\")
	

func _fire():
	var w = load(\"res://Objects/weapon/energyBall.tscn\").instance()
	w.parent = 1
	w.dir = rotation.y
	w.global_transform.origin = $weaponNode.global_transform.origin
	
	get_tree().current_scene.add_child(w)
	w = null
	
	fire = false
	canMove = true
	

func resetWeapon(a : int):
	var select = Game.inventory [a]
	
	if G.mode == 0 or G.mode == 1:
		match select:
			\"BlueSword\":
				var s = load(\"res://Objects/weapon/sword1.tscn\").instance()
				s.par = 0
				$\"player/playerHandR/weapR\".add_child(s)
				sword = s
				hasSword = true
			\"Fireball\":
				sword = null
				hasSword = null
				for w in $\"player/playerHandR/weapR\".get_children():
					w.queue_free()
			\"\":
				sword = null
				hasSword = null
				for w in $\"player/playerHandR/weapR\".get_children():
					w.queue_free()
				
			
		
	

func checkParams():
	if params [\"AE\"]:
		params [\"AE\"].get_parent().injure(force)
	

func _ready():
	G.player = self
	hp = Game.PlayerParams [\"maxHp\"]
	
	var Sp = G.GetCurSpawn()
	if Sp:
		global_transform.origin = Sp.global_transform.origin
		IsSpawned = true
	else:
		pass
	



# warning-ignore:unused_argument
func _physics_process(delta):
	if not canMove or not IsSpawned: return;
	
	if G.mode == 0:
		if canMove:
			var mDir : Vector3 = Vector3()
			
			if is_on_floor():
				if Input.is_action_pressed(\"ui_up\"):
					dir = \"up\"
					mDir.x = -speed
				elif Input.is_action_pressed(\"ui_down\"):
					dir = \"down\"
					mDir.x = speed
				elif Input.is_action_pressed(\"ui_left\"):
					dir = \"left\"
					mDir.z = speed
				elif Input.is_action_pressed(\"ui_right\"):
					dir = \"right\"
					mDir.z = -speed
				else:
					mDir.x = 0
					mDir.z = 0
				
			else:
				mDir.x = vel.x
				mDir.z = vel.z
			
			vel.x = mDir.x
			vel.y -= G.gravity
			vel.z = mDir.z
			
			if Input.is_action_pressed(\"ui_jump\"):
				if is_on_floor():
					vel.y = jumpForce
			
			vel = move_and_slide(vel, Vector3.UP)
		
	elif G.mode == 1:
		var mDir : Vector3 = Vector3()
		
		if Input.is_action_pressed(\"ui_right\"):
			mDir.x = speed / 1.7
			dir = \"right\"
		elif Input.is_action_pressed(\"ui_left\"):
			mDir.x = -speed / 1.7
			dir = \"left\"
		else:
			mDir.x = 0
		
		mDir.y = 0; mDir.z = 0
		
		mDir = mDir.rotated(Vector3.UP, G.MovingDir)
		
		vel.x = mDir.x
		vel.y -= G.gravity
		vel.z = mDir.z
		
		if Input.is_action_just_pressed(\"ui_jump\") or Input.is_action_just_pressed(\"ui_up\"):
			if is_on_floor():
				vel.y = jumpForce
			
		
		vel = move_and_slide(vel, Vector3.UP, true)
		
	


# warning-ignore:unused_argument
func _process(delta):
	if not IsSpawned:
		var Sp = G.GetCurSpawn()
		if Sp:
			global_transform.origin = Sp.global_transform.origin
			IsSpawned = true
		else:
			return
		
	#if Input.is_action_pressed(\"ui_debug\"): print(params [\"IsDead\"])
	if G.mode == 0:
		$playerArea/CollisionShape.shape.radius = 1.5
		
		if sword: sword.force = 10
		
		if canMove:
			if dir:
				if dir == \"up\":
					rotation_degrees.y = lerp(rotation_degrees.y, 180, 0.1)
				elif dir == \"down\":
					rotation_degrees.y = lerp(rotation_degrees.y, 0, 0.1)
				elif dir == \"left\":
					rotation_degrees.y = lerp(rotation_degrees.y, -90, 0.1)
				elif dir == \"right\":
					rotation_degrees.y = lerp(rotation_degrees.y, 90, 0.1)
			
			if anim and fire == false:
				
				if is_on_floor():
					if Input.is_action_just_released(\"ui_up\"):
						if anim.lastAnimation == \"run\":
							anim.play(\"stop\")
					elif Input.is_action_just_released(\"ui_down\"):
						if anim.lastAnimation == \"run\":
							anim.play(\"stop\")
					elif Input.is_action_just_released(\"ui_left\"):
						if anim.lastAnimation == \"run\":
							anim.play(\"stop\")
					elif Input.is_action_just_released(\"ui_right\"):
						if anim.lastAnimation == \"run\":
							anim.play(\"stop\")
					
					elif Input.is_action_pressed(\"ui_up\"):
						if anim.lastAnimation != \"run\":
							anim.play(\"run\")
					elif Input.is_action_pressed(\"ui_down\"):
						if anim.lastAnimation != \"run\":
							anim.play(\"run\")
					elif Input.is_action_pressed(\"ui_left\"):
						if anim.lastAnimation != \"run\":
							anim.play(\"run\")
					elif Input.is_action_pressed(\"ui_right\"):
						if anim.lastAnimation != \"run\":
							anim.play(\"run\")
					
					else:
						if anim.current_animation == \"\" or anim.lastAnimation == \"falling\":
							anim.play(\"calm\")
					
				else:
					anim.play(\"falling\")
				
			
			
		
		if G.canMove:
			
			if Input.is_action_just_pressed(\"ui_fire\"):
				if ((vel.x < -0.75 || vel.x > 0.75)
				or (vel.z < -0.75 || vel.z > 0.75)): return
				if (hasSword == true and sword) and Game.getWeapType(Game.CurWeap) == 'sword':
					if rand_range(2.0,4.0) >= 3:
						anim.play(\"attack\")
					else:
						anim.play_backwards(\"attack\")
				elif Game.CurWeap == \"Fireball\":
					if Game.Abilities [\"Fireballs\"] == true:
						fire = true
						anim.play(\"fire\")
					
				
			if fire == true and (anim.lastAnimation == \"fire\"):
				if Game.Abilities [\"Fireballs\"] == true:
					canMove = false
					if not anim.is_playing() and anim.lastAnimation == \"fire\":
						_fire()
					
				
			
			if sword:
				if anim.current_animation == \"attack\":
					sword.isAttacking = true
				else:
					sword.isAttacking = false
					
				
			
			if hp <= 0:
				if anim.current_animation != \"death\":
					if anim.lastAnimation == \"death\":
						G.death()
					else:
						G.canMove = false
						anim.play(\"death\")
					
				
			
			if params [\"LItem\"] != null:
				if G.Gui [\"Gui\"]:
					var txt = params [\"LItem\"].ItemName + \". Press \\\"E\\\" to take it\"
					G.Gui [\"Gui\"].TakeMessage(txt)
				
				if Input.is_action_just_pressed(\"ui_get\"):
					for i in (len(Game.inventory) - 1):
						if Game.inventory [i] == \"\":
							Game.inventory [i] = params [\"LItem\"].RealName
							Game.setCurWeap(i); resetWeapon(i);
							params [\"LItem\"].Destroy()
							return;
					G.Gui [\"Gui\"].TakeMessage(\"You don't have any free space in your inventory.\" 
					+ \"You have nowhere to put the item\");
			
			if Game.CurWeap != \"\":
				if Input.is_action_just_pressed(\"ui_throw\"):
					var inst = load(Game.getPath2item(Game.CurWeap)).instance()
					if $Aim.is_colliding():
						inst.global_transform.origin = ($Aim.get_collision_point()
						- Vector3(0.1,0,0).rotated(Vector3.UP, rotation.y))
					else:
						inst.global_transform.origin = (global_transform.origin
						+ Vector3(3,1,0).rotated(Vector3.UP,rotation.y))
					if G.Nodes [\"drop\"] != null:
						G.Nodes [\"drop\"].add_child(inst)
					
					Game.CurWeap = \"\"; Game.inventory [Game.ItemId] = \"\";
					resetWeapon(Game.ItemId)
					
					\"\"\"if $Aim.is_colliding():
						$\"../TSTN\".global_transform.origin = $Aim.get_collision_point()
					else:
						$\"../TSTN\".global_transform.origin = (global_transform.origin
						+ Vector3(3,0,0).rotated(Vector3.UP,rotation.y))\"\"\"
					
				
			
		
	elif G.mode == 1:
		if anim.is_playing(): anim.stop()
		
		#if params [\"Zpos\"] == null:
		#	params [\"Zpos\"] = global_transform.origin.z
		#else:
		#	global_transform.origin.z = params [\"Zpos\"]
		
		var weight : float
		$playerArea/CollisionShape.shape.radius = 2.5
		
		if sword: sword.force = 20
		
		if canMove:
			if dir == \"left\":
				rotation.y = lerp_angle(rotation.y, G.MovingDir + deg2rad(-180), 0.1)
			elif dir == \"right\":
				rotation.y = lerp_angle(rotation.y, G.MovingDir + deg2rad(0), 0.1)
			
			if anim1:
				if not is_on_floor():
					weight = 5.0
				elif ((not vel.x in range(-1,1) or not vel.y in range(-1,1)) 
				and (Input.is_action_pressed(\"ui_left\") or Input.is_action_pressed(\"ui_right\"))):
					weight = 4.0
				elif Input.is_action_just_pressed(\"ui_hit2\"):
					if Game.getWeapType(Game.CurWeap) == \"sword\" and sword:
						weight = 1.1
					elif Game.CurWeap == \"Fireball\":
						weight = 2.1
					elif Game.CurWeap == \"\":
						weight = 3.1
				elif Input.is_action_just_pressed(\"ui_hit1\") or Input.is_action_just_pressed(\"ui_fire\"):
					if Game.getWeapType(Game.CurWeap) == \"sword\" and sword:
						weight = 1.0
					elif Game.CurWeap == \"Fireball\":
						weight = 2.0
					elif Game.CurWeap == \"\":
						weight = 3.0
				elif Input.is_action_just_released(\"ui_right\") or Input.is_action_just_released(\"ui_left\"):
					weight = 6.0
				else:
					weight = 0.0
				
				if not anim1.is_playing() or anim1.current_animation == \"idle\":
					if weight == 1.0:
						anim1.play(\"SwordHit1\", 0, G.rd.randf_range(1,1.3))
					elif weight == 1.1:
						anim1.play(\"SwordHit2\", 0, G.rd.randf_range(1.5,2))
					
					elif weight == 2.0:
						anim1.play(\"EnergyHit1\")
					elif weight == 2.1:
						anim1.play(\"EnergyHit1\")
					
					elif weight == 3.0:
						anim1.play(\"HitByHand\", 0, G.rd.randf_range(1,2))
					elif weight == 3.1:
						anim1.play(\"HitByHand\", 0, G.rd.randf_range(1,2))
					
					elif weight == 4.0:
						if anim1.lastAnimation != \"move\" or params [\"ILS\"] == true:
							anim1.play(\"move\")
							params [\"ILS\"] = false
					elif weight == 5.0:
						if anim1.lastAnimation != \"jump\":
							anim1.play(\"jump\")
					elif weight == 6.0:
						if anim1.lastAnimation == \"move\":
							anim1.play_backwards(\"move\")
							params [\"ILS\"] = true
					
					elif not anim1.is_playing() and weight == 0.0:
						anim1.play(\"idle\")
					
				
				if anim1.current_animation == \"HitByHand\":
					$playerArea.isAttacking = true
				else:
					$playerArea.isAttacking = false
				
				if anim1.current_animation == \"SwordHit1\" or anim1.current_animation == \"SwordHit2\":
					if sword:
						sword.isAttacking = true
						$playerArea.isAttacking = true
				else:
					if sword:
						sword.isAttacking = false
						$playerArea.isAttacking = false
					
				
			
		if hp <= 0 and params [\"IsDead\"] == false:
			params [\"IsDead\"] = true
		if params [\"IsDead\"] == true:
			if anim1.lastAnimation == \"death\" and anim1.current_animation != \"death\":
				G.death()
			else:
				if anim1.current_animation != \"death\":
					anim1.play(\"death\")
				
				
			
		
	if Input.is_action_pressed(\"ui_shift\") and Game.Abilities [\"Run\"] == true:
		speed = 15
	else:
		speed = 10
	
	if Input.is_action_pressed(\"ui_select\"):
		if G.mode == 0:
			pass
		
	
	if G.canMove == false:
		canMove = false
	else:
		canMove = true
	


func _on_playerArea_area_entered(area):
	if area.name == \"weap\":
		if area.par != 0: hp -= area.force
	elif area.name.begins_with(\"money\"):
		score += 1
		area.queue_free()
	elif area.name == \"enemyArea\":
		params [\"AE\"] = area
	elif area.name == \"ItemArea\":
		params [\"LItem\"] = area
	elif area.name.begins_with(\"RDS\"):
		G.Render.OptimizationStep = area.new_optimization_step
	

func _on_playerArea_area_exited(area):
	if area.name == \"enemyArea\" and params [\"AE\"] != null:
		params [\"AE\"] = null
	elif area == params [\"LItem\"]:
		params [\"LItem\"] = null
	elif area.name.begins_with(\"RDS\"):
		G.Render.OptimizationStep = 1
	
"

[sub_resource type="Animation" id=2]
resource_name = "attack"
length = 0.3
tracks/0/type = "value"
tracks/0/path = NodePath("player/playerHandL:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( -34.0807, 107.752, -7.06811 ), Vector3( -34.0807, 107.752, -7.06811 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("player/playerHandR:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 180, 0 ), Vector3( 0, 180, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:rotation_degrees")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, 180, 0 ), Vector3( 0, 270, 0 ), Vector3( 0, 360, 0 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("player:rotation_degrees")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, -20 ), Vector3( 0, 0, -20 ) ]
}

[sub_resource type="Animation" id=3]
length = 2.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("player/playerHandL:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 2 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, -90, 0 ), Vector3( 0, -85, 0 ), Vector3( 0, -90, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("player/playerHandR:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1, 2 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, -90, 0 ), Vector3( 0, -95, 0 ), Vector3( 0, -90, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("player:rotation_degrees")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, 0, 0 ) ]
}

[sub_resource type="Animation" id=4]
resource_name = "death"
tracks/0/type = "value"
tracks/0/path = NodePath("player/playerHandL:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, -90, 0 ), Vector3( -22.8452, -10.4665, 27.2935 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("player/playerHandR:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, -90, 0 ), Vector3( -22.5865, -168.989, -27.2403 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("player:rotation_degrees")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, 0, 65 ) ]
}

[sub_resource type="Animation" id=5]
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("player/playerHandL:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 87.4188, 26.9749, 123.329 ), Vector3( 84.0504, 11.3662, 107.684 ), Vector3( 87.4188, 26.9749, 123.329 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("player/playerHandR:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.5, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 88.235, 0, 0 ), Vector3( 96.244, 0, 0 ), Vector3( 88.235, 0, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("player:rotation_degrees")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, 0, 0 ) ]
}

[sub_resource type="Animation" id=6]
length = 0.7
step = 0.05
tracks/0/type = "value"
tracks/0/path = NodePath("player/playerHandL:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2, 0.35, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector3( -45, -90, 0 ), Vector3( 27.168, -90, -2.67982e-06 ), Vector3( 27.168, -90, -2.67982e-06 ), Vector3( -45, -90, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("player/playerHandR:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.2, 0.35, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector3( -45, -90, 0 ), Vector3( 27.168, -90, -2.67982e-06 ), Vector3( 27.168, -90, -2.67982e-06 ), Vector3( -45, -90, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("player:rotation_degrees")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.2, 0.35, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, 0, -20.595 ), Vector3( 0, 0, -20.595 ), Vector3( 0, 0, 0 ) ]
}

[sub_resource type="Animation" id=7]
length = 0.4
tracks/0/type = "value"
tracks/0/path = NodePath("player/playerHandL:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, -90, 0 ), Vector3( -13, 77, -11 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("player/playerHandR:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 270, 0 ), Vector3( -15, 105, 11 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("player:rotation_degrees")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, 0, -30 ) ]
}

[sub_resource type="Animation" id=8]
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("player/playerHandL:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector3( -12.814, 77.0061, -10.0563 ), Vector3( -11.7205, 69.6141, -6.32512 ), Vector3( -12.814, 77.0061, -10.0563 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("player/playerHandR:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.5, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector3( -14.5831, 105.371, 11.4322 ), Vector3( -12.2956, 117.596, 5.46231 ), Vector3( -14.5831, 105.371, 11.4322 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("player:rotation_degrees")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, -30 ), Vector3( 0, 0, -30 ) ]
}

[sub_resource type="Animation" id=9]
length = 0.4
tracks/0/type = "value"
tracks/0/path = NodePath("player/playerHandL:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0.1, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( -12.814, 77.0061, -10.0563 ), Vector3( 0, -90, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("player/playerHandR:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0.1, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( -14.5831, 105.371, 11.4322 ), Vector3( 0, 270, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("player:rotation_degrees")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, -30 ), Vector3( 0, 0, 0 ) ]
}

[sub_resource type="GDScript" id=10]
script/source = "extends AnimationPlayer


var lastAnimation = \"\"


func _process(delta):
	if current_animation != \"\":
		lastAnimation = current_animation
	



"

[sub_resource type="Animation" id=11]
resource_name = "EnergyHit1"
length = 0.3
tracks/0/type = "value"
tracks/0/path = NodePath("player:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, 0, -30 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("player/playerHandL:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, -90, 0 ), Vector3( 30, -90, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("player/playerHandR:rotation_degrees")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, -90, 0 ), Vector3( 30, -90, 0 ) ]
}

[sub_resource type="Animation" id=12]
length = 0.6
step = 0.05
tracks/0/type = "value"
tracks/0/path = NodePath("player:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.25, 0.4, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, 0, 15 ), Vector3( 0, 0, 20 ), Vector3( 0, 0, 20 ), Vector3( 0, 0, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("player/playerHandL:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.1, 0.3, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ Vector3( 0, -89.3949, 0 ), Vector3( 0, -40, 0 ), Vector3( 0, -40, 0 ), Vector3( 0, -89.3949, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("player/playerHandR:rotation_degrees")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.1, 0.3, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ Vector3( 0.100853, -90, 0 ), Vector3( 0.101, -130, 0 ), Vector3( 0.101, -130, 0 ), Vector3( 0.100853, -90, 0 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath(".:canMove")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.6 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ false, true ]
}

[sub_resource type="Animation" id=13]
length = 0.7
step = 0.05
tracks/0/type = "value"
tracks/0/path = NodePath("player:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( -0.00203761, 0.2, 0.35, 0.45, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, -20, 10 ), Vector3( 0, -20, 10 ), Vector3( 0, 30, -5 ), Vector3( 0, 30, -5 ), Vector3( 0, 0, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("player/playerHandL:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( -0.00203761, 0.2, 0.35, 0.45, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, -90, 0 ), Vector3( 0, -30, 0 ), Vector3( 0, -30, 0 ), Vector3( 0, -20, 0 ), Vector3( 0, -20, 0 ), Vector3( 0, -90, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("player/playerHandR:rotation_degrees")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( -0.00203761, 0.2, 0.35, 0.45, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, -90, 0 ), Vector3( 10, -90, 0 ), Vector3( 10, -90, 0 ), Vector3( 10, -120, 0 ), Vector3( 10, -120, 0 ), Vector3( 0, -90, 0 ) ]
}
tracks/3/type = "method"
tracks/3/path = NodePath(".")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0.7 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "checkParams"
} ]
}

[sub_resource type="Animation" id=14]
step = 0.05
tracks/0/type = "value"
tracks/0/path = NodePath("player:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2, 0.35, 0.45, 0.6, 1 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, 0, 20 ), Vector3( 0, 0, 20 ), Vector3( 0, 25, -25 ), Vector3( 0, 25, -25 ), Vector3( 0, 0, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("player/playerHandL:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.2, 0.35, 0.45, 0.6, 1 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, -90, 0 ), Vector3( -20, 105, 0 ), Vector3( -20, 105, 0 ), Vector3( -20, 0, 0 ), Vector3( -20, 0, 0 ), Vector3( 0, -90, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("player/playerHandR:rotation_degrees")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.2, 0.35, 0.45, 0.6, 1 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, -90, 0 ), Vector3( 110, -90, 0 ), Vector3( 110, -90, 0 ), Vector3( 0, -110, 0 ), Vector3( 0, -110, 0 ), Vector3( 0, -90, 0 ) ]
}

[sub_resource type="Animation" id=15]
step = 0.05
tracks/0/type = "value"
tracks/0/path = NodePath("player:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.5, 0.95, 1 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, -20, -25 ), Vector3( 0, 160, -25 ), Vector3( 0, 340, -25 ), Vector3( 0, 0, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("player/playerHandL:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.1, 0.5, 0.95, 1 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, -90, 0 ), Vector3( -50, 100, 0 ), Vector3( -50, 100, 0 ), Vector3( -50, 100, 0 ), Vector3( 0, -90, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("player/playerHandR:rotation_degrees")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.1, 0.95, 1 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, -90, 0 ), Vector3( 0, 180, 90 ), Vector3( 0, 180, 90 ), Vector3( 0, -90, 0 ) ]
}

[sub_resource type="Animation" id=16]
resource_name = "death"
tracks/0/type = "value"
tracks/0/path = NodePath("player:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, 0, 65 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("player/playerHandL:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, -90, 0 ), Vector3( -23, -10, 30 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("player/playerHandR:rotation_degrees")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, -90, 0 ), Vector3( -23, -170, -30 ) ]
}

[sub_resource type="Animation" id=17]
length = 0.8
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("player:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.4, 0.8 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, 0, 1 ), Vector3( 0, 0, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("player/playerHandL:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.4, 0.8 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, -90, 0 ), Vector3( 0, -85, 0 ), Vector3( 0, -90, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("player/playerHandR:rotation_degrees")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.4, 0.8 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, -90, 0 ), Vector3( 0, -95, 0 ), Vector3( 0, -90, 0 ) ]
}

[sub_resource type="Animation" id=18]
length = 0.21
tracks/0/type = "value"
tracks/0/path = NodePath("player:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, 0, 5 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("player/playerHandL:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, -90, 0 ), Vector3( 60, 0, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("player/playerHandR:rotation_degrees")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, -90, 0 ), Vector3( 60, -180, 0 ) ]
}

[sub_resource type="Animation" id=19]
length = 0.35
tracks/0/type = "value"
tracks/0/path = NodePath("player:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, 0, -22.5 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("player/playerHandL:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, -90, 0 ), Vector3( -13, 77, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("player/playerHandR:rotation_degrees")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 270, 0 ), Vector3( -15, 105, 11 ) ]
}

[sub_resource type="GDScript" id=20]
script/source = "extends AnimationPlayer


var lastAnimation : String = \"\"


func _process(delta):
	if current_animation != \"\":
		lastAnimation = current_animation
	
"

[sub_resource type="SphereShape" id=21]
radius = 1.12015

[sub_resource type="GDScript" id=22]
script/source = "extends Area


var isAttacking = false
"

[sub_resource type="SphereShape" id=23]
radius = 1.5

[node name="Player" type="KinematicBody"]
script = SubResource( 1 )

[node name="player" parent="." instance=ExtResource( 1 )]

[node name="playerHandL" parent="player" instance=ExtResource( 2 )]
transform = Transform( 0.0105609, 0, -0.999942, 0, 0.999997, 0, 0.999944, 0, 0.0105608, 0, 0.9, -1 )

[node name="weapL" type="Spatial" parent="player/playerHandL"]
transform = Transform( 0.993463, 0.0382262, 0.107557, -0.107221, -0.0107328, 0.994177, 0.039158, -0.999211, -0.00656397, 0.00749159, -0.00505512, -0.670717 )

[node name="playerHandR" parent="player" instance=ExtResource( 2 )]
transform = Transform( -4.37114e-08, -0.00176022, -0.999998, 0, 0.999998, -0.00176022, 1, -7.69415e-11, -4.37113e-08, 2.98023e-08, 0.9, 1 )

[node name="weapR" type="Spatial" parent="player/playerHandR"]
transform = Transform( -0.0615308, 0.0303874, -0.997643, 0.998043, 0.0130836, -0.0611569, 0.0111944, -0.999452, -0.031133, -0.0452192, -0.0047276, -0.658026 )

[node name="anim" type="AnimationPlayer" parent="."]
anims/attack = SubResource( 2 )
anims/calm = SubResource( 3 )
anims/death = SubResource( 4 )
anims/falling = SubResource( 5 )
anims/fire = SubResource( 6 )
anims/run = SubResource( 7 )
anims/running = SubResource( 8 )
anims/stop = SubResource( 9 )
script = SubResource( 10 )

[node name="anim1" type="AnimationPlayer" parent="."]
anims/EnergyHit1 = SubResource( 11 )
anims/GetDamage = SubResource( 12 )
anims/HitByHand = SubResource( 13 )
anims/SwordHit1 = SubResource( 14 )
anims/SwordHit2 = SubResource( 15 )
anims/death = SubResource( 16 )
anims/idle = SubResource( 17 )
anims/jump = SubResource( 18 )
anims/move = SubResource( 19 )
script = SubResource( 20 )

[node name="CollisionShape" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.96332, 0 )
shape = SubResource( 21 )

[node name="weaponNode" type="Spatial" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 1.33842, 0.898928, 0 )

[node name="playerArea" type="Area" parent="."]
script = SubResource( 22 )

[node name="CollisionShape" type="CollisionShape" parent="playerArea"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.975066, 0 )
shape = SubResource( 23 )

[node name="Aim" type="RayCast" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.29302, 0 )
enabled = true
cast_to = Vector3( 3, 1, 0 )

[connection signal="area_entered" from="playerArea" to="." method="_on_playerArea_area_entered"]
[connection signal="area_exited" from="playerArea" to="." method="_on_playerArea_area_exited"]
